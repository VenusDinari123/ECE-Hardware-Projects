//==============================================================================
// Datapath for PUnC LC3 Processor
//==============================================================================

`include "Defines.v"
`include "RegisterFile.v"
`include "Memory.v"

module PUnCDatapath(
    // External Inputs
    input  wire        clk,            // Clock
    input  wire        rst,            // Reset

    // DEBUG Signals
    input  wire [15:0] mem_debug_addr,
    input  wire [2:0]  rf_debug_addr,
    output wire [15:0] mem_debug_data,
    output wire [15:0] rf_debug_data,
    output wire [15:0] pc_debug_data,

    // Memory Controls
    input  wire        d_r_addr_sel,
    input  wire        d_w_addr_sel,
    input  wire        d_w_data_sel,
    input  wire        d_w_enable,

    // Register File Controls
    input  wire    [1:0]    rf_r_addr0_sel,
    input  wire        [1:0] rf_r_addr1_sel,
    input  wire        rf_w_addr_sel,
    input  wire [1:0]  rf_w_data_sel,
    input  wire        rf_w_enable,

    // Instruction Register Controls
    input  wire        ir_ld,

    // Program Counter Controls
    input  wire        pc_ld,
    input  wire        pc_clr,
    input  wire        pc_inc,
    input  wire [1:0]  pc_sel,

    // ALU Controls
    input  wire [1:0]  alu_sel,
    input  wire        alu_input1_sel,
    input  wire [1:0]  alu_input2_sel,

    // Condition Code Controls
    input  wire        nzp_sel,
    input  wire        nzp_ld,
    input  wire        nzp_clr,
    
    output reg [15:0] ir,
    output reg[2:0] nzp_out 
            // NZP Input Data
     // Instruction Register

);

    //--------------------------------------------------------------------------
    // Internal Signals
    //--------------------------------------------------------------------------
    wire [15:0] nzp_input; 
    reg  [15:0] pc;          // Program Counter
   

    wire [15:0] d_r_addr0;    // Memory Read Address
    wire [15:0] d_r_addr1;    // Memory Read Address
    wire [15:0] d_w_addr;    // Memory Write Address
    wire [15:0] d_r_data0;    // Memory Read Data
    wire [15:0] d_w_data;    // Memory Write Data

    wire [2:0]  rf_r_addr0;  // Register File Read Address 0
    wire [2:0]  rf_r_addr1;  // Register File Read Address 1
    wire [2:0]  rf_w_addr;   // Register File Write Address
    wire [15:0] rf_r_data0;  // Register File Read Data 0
    wire [15:0] rf_r_data1;  // Register File Read Data 1
    wire [15:0] rf_w_data;   // Register File Write Data
//alu channels
    wire [15:0] alu_input1;  // ALU Input 1
    wire [15:0] alu_input2;  // ALU Input 2
    wire [15:0] alu_output;  // ALU Output
    
    wire[15:0] pc_value;

    
    // Connect the internal reg to output ports
//assign nzp_input = nzp_reg; // Connect nzp_reg to the output port


    // Assign PC debug data
    assign pc_debug_data = pc;

    //--------------------------------------------------------------------------
    // Memory Module
    //--------------------------------------------------------------------------
   assign d_r_addr0 = (ir_ld == 1'd1) ? pc: 
                              (d_r_addr_sel == `D_R_ADDR_ALU) ? alu_output:
                              (d_r_addr_sel == `D_R_ADDR_RF) ? rf_r_data0: 16'd0;
// Memory Write Adress Mux 
assign d_w_addr = (d_w_addr_sel == `D_W_ADDR_ALU) ? alu_output:
                                    (d_w_addr_sel == `D_W_ADDR_MEM) ? d_r_data0 : 16'd0;
                                    
 assign d_w_data = (d_w_data_sel == `D_W_DATA_R1) ? rf_r_data1 : rf_r_data0;    

    Memory mem(
        .clk      (clk),
        .rst      (rst),
        .r_addr_0 (d_r_addr0),
        .r_addr_1 (mem_debug_addr),
        .w_addr   (d_w_addr),
        .w_data   (d_w_data),
        .w_en     (d_w_enable),
        .r_data_0 (d_r_data0),
        .r_data_1 (mem_debug_data)
    );

    //--------------------------------------------------------------------------
    // Register File Module
    //--------------------------------------------------------------------------
  // Register File Module

assign rf_r_addr0 = (rf_r_addr0_sel == `RF_R_ADDR0_SEL_SR1) ? ir[`SR1] : // Also ir[`BASER]
                    (rf_r_addr0_sel == `RF_R_ADDR0_SEL_DR) ? ir[`DR] : 3'd0;

assign rf_r_addr1 = (rf_r_addr1_sel == `RF_R_ADDR1_SEL_SR) ? ir[`SR2] : 
                    (rf_r_addr1_sel == `RF_R_ADDR1_SEL_R7)  ? 3'd7   : 3'd0;

assign rf_w_addr = (rf_w_addr_sel == `RF_W_ADDR_SEL_R7) ? 3'd7   : 
                   (rf_w_addr_sel == `RF_W_ADDR_SEL_DR) ? ir[`DR] : 3'd0;

// Register File Write Data MUX
assign rf_w_data = (rf_w_data_sel == `RF_W_DATA_SEL_ALU) ? alu_output : 
                   (rf_w_data_sel == `RF_W_DATA_SEL_MEM) ? d_r_data0  : 
                   (rf_w_data_sel == `RF_W_DATA_SEL_PC)  ? pc + 16'd1 : 16'd0;


                        
//assign rf_r_addr0 = (rf_r_addr0_sel == `RF_R_ADDR0_SEL_SR1) ? ir[8:6] : ir[11:9];
   // assign rf_r_addr1 = (rf_r_addr1_sel == `RF_R_ADDR0_SEL_SR1)  ? ir[2:0] : ir[8:6];
   // assign rf_w_addr  = (rf_w_addr_sel  == `RF_W_ADDR_SEL_DR)  ? ir[11:9] : 3'b111;
   // assign rf_w_data  = (rf_w_data_sel  == `RF_W_DATA_SEL_ALU) ? alu_output :
                       // (rf_w_data_sel  == `RF_W_DATA_SEL_MEM) ? d_r_data0 :
                      //  (rf_w_data_sel  == `RF_W_DATA_SEL_PC)  ? pc : 16'd0;
//
    RegisterFile rfile(
        .clk      (clk),
        .rst      (rst),
        .r_addr_0 (rf_r_addr0),
        .r_addr_1 (rf_r_addr1),
        .r_addr_2 (rf_debug_addr),
        .w_addr   (rf_w_addr),
        .w_data   (rf_w_data),
        .w_en     (rf_w_enable),
        .r_data_0 (rf_r_data0),
        .r_data_1 (rf_r_data1),
        .r_data_2 (rf_debug_data)
        

    );
// Instruction Register 
// Instruction Register
always @(posedge clk) begin
    if (rst) begin
        ir <= 16'd0;
    end
    else if (ir_ld) begin
        ir <= d_r_data0;
    end
end

    //--------------------------------------------------------------------------
    // Program Counter
    //--------------------------------------------------------------------------
    
   

// PC MUX
assign pc_value = (pc_sel == `PC_SEL_OFF9)  ? {{7{ir[8]}}, ir[8:0]} :
                  (pc_sel == `PC_SEL_OFF11) ? {{5{ir[10]}}, ir[10:0]}:
                 (pc_sel == `PC_SEL_BASER) ? rf_r_data0 : 16'd0;

always @(posedge clk) begin
    if (rst) begin
        pc <= 16'd0;
    end
    else if (pc_ld && !(pc_sel == `PC_SEL_BASER)) begin
        pc <= pc + pc_value; // pc <= pc_value + 16'd1;
    end
    else if (pc_ld && (pc_sel == `PC_SEL_BASER)) begin
        pc <= pc_value;
    end
    else if (pc_inc) begin
        pc <= pc + 16'd1;
    end
end


    //--------------------------------------------------------------------------
    // ALU
    //--------------------------------------------------------------------------
         assign alu_input1 = (alu_input1_sel == `ALU_1_SEL_PC) ? pc + 16'd1:
            (alu_input1_sel == `ALU_1_SEL_RF) ? rf_r_data0 :
            (alu_input1_sel == `ALU_1_SEL_RF1) ? rf_r_data1 : 16'd0;

         assign alu_input2 = (alu_input2_sel == `ALU_2_SEL_IMM5) ? {{11{ir[4]}}, ir[4:0]} :
                        (alu_input2_sel == `ALU_2_SEL_RF) ? rf_r_data1 :
                        (alu_input2_sel == `ALU_2_SEL_OFF6) ? {{10{ir[5]}}, ir[5:0]} :
                        (alu_input2_sel == `ALU_2_SEL_OFF9) ? {{7{ir[8]}}, ir[8:0]} : 16'd0;
                        
                        

   // ALU Output Assignment
assign alu_output = (alu_sel == `ALU_FN_ADD) ? (alu_input1 + alu_input2) :
                    (alu_sel == `ALU_FN_AND) ? (alu_input1 & alu_input2) :
                    (alu_sel == `ALU_FN_NOT) ? ~alu_input1 :
                    32'b0; // Default case

// NZP MUX
assign nzp_input = (nzp_sel == `NZP_SEL_MEM) ? d_r_data0 :
                   (nzp_sel == `NZP_SEL_ALU) ? alu_output[15:0] : // Truncate if needed
                   16'd0; // Default case



 
   

    //--------------------------------------------------------------------------
    // Condition Codes
    //--------------------------------------------------------------------------


// NZP MUX
assign nzp_input = (nzp_sel == `NZP_SEL_MEM) ? d_r_data0 :
                   (nzp_sel == `NZP_SEL_ALU) ? alu_output : 16'd0;

always @(posedge clk) begin
    if (nzp_ld) begin
        if (nzp_input == 16'd0) begin // The value equals zero
            nzp_out <= 3'b010;
        end
        else if (nzp_input[15]) begin // The value is negative
            nzp_out <= 3'b100;
        end
        else if (!nzp_input[15]) begin // The value is positive
            nzp_out <= 3'b001;
        end
    end
    else if (nzp_clr) begin
        nzp_out <= 3'b000;
    end
    end
    endmodule
//==============================================================================
// Control Unit for PUnC LC3 Processor
//==============================================================================

`include "Defines.v"

module PUnCControl(
	// External Inputs
	input  wire        clk,            // Clock
	input  wire        rst,            // Reset
	
	//inputs from data path 
	input wire [15:0]       ir,
	input wire [2:0] nzp_input,
	
	// Memory Controls 
	output reg       d_r_addr_sel,
    output reg       d_w_addr_sel,//where we are writing 
    output reg       d_w_enable,//enables
    output reg       d_w_data_sel,//what data is stored 

    //,...



	// Register File Controls
 
   output reg [1:0] rf_r_addr0_sel,
   output reg  [1:0] rf_r_addr1_sel,
  output reg  [1:0] rf_w_data_sel,
   output reg  rf_w_addr_sel,
    output reg  rf_w_enable,
     
	

	// Instruction Register Controls

   output reg             ir_ld,
	//...
	
	 // Program Counter Controls
   output reg             pc_ld,
   output reg             pc_clr,
   output reg             pc_inc,

  //program counter mux 
 output reg [1:0] pc_sel,
 
 //alu controls 
   output reg[1:0]        alu_sel,
   output reg       alu_input1_sel,
   output reg[1:0]        alu_input2_sel,
//condition codes 
    output reg nzp_sel,
    output reg nzp_ld,
    output reg nzp_clr
);

	// FSM States
	// Add your FSM State values as localparams here
   
   localparam STATE_FETCH     = 3'b001;
   localparam STATE_DECODE    = 3'b010;
   localparam STATE_EXECUTE   = 3'b011;
   localparam STATE_EXECUTE_I = 3'b100;
   localparam STATE_HALT      = 3'b101;
	

	// State, Next State
	reg [2:0] state, next_state;

	// Output Combinational Logic
	always @( * ) begin
		// Set default values for outputs here (prevents implicit latching)
     rf_r_addr0_sel = 1'd0;
     rf_r_addr1_sel =1 'd0;
     rf_w_data_sel =  1'd0;
     rf_w_addr_sel = 1'd0;
     rf_w_enable = 1'd0;
     
     d_r_addr_sel = 1'd0;
     d_w_data_sel = 1'd0;
     d_w_addr_sel = 1'd0;
     d_w_enable = 1'd0;
    
      ir_ld          = 1'd0;
      pc_ld          = 1'd0;
      pc_clr         = 1'd0;
      pc_inc         = 1'd0;
      pc_sel         = 2'd0;
      
      alu_sel          = 2'd0;
      alu_input1_sel = 1'd0;
      alu_input2_sel = 1'd0;
      nzp_sel          =1'd0;
      nzp_ld           =1'd0;
      nzp_clr           =1'd0;

	  case (state)
         STATE_FETCH: begin
            ir_ld      = 1'd1;
            
         end
         STATE_DECODE: begin

         end
         STATE_EXECUTE: begin
         pc_inc     = 1'd1; // NOTE: In PUnC, this happens after Fetch AND Decode
            case (ir[`OC])
                `OC_ADD: begin
                    if (ir[5] ==0 ) begin
                  
                  alu_input1_sel = `ALU_1_SEL_RF;
                  alu_input2_sel = `ALU_2_SEL_RF;
                  alu_sel          = `ALU_FN_ADD;
                  rf_r_addr0_sel = `RF_R_ADDR0_SEL_SR1;
                   rf_r_addr1_sel = `RF_R_ADDR1_SEL_SR;

                  rf_w_data_sel =  `RF_W_DATA_SEL_ALU;//ALU OUTPUTTED INFO
                  rf_w_addr_sel = `RF_W_ADDR_SEL_DR; // WIRTE BACK IN DR 
                  rf_w_enable = 1'b1;
                  nzp_ld = 1'b1;
                  nzp_sel = `NZP_SEL_ALU;
               end
               else begin 
                  alu_input1_sel = `ALU_1_SEL_RF;
                  alu_input2_sel = `ALU_2_SEL_IMM5;
                  alu_sel          = `ALU_FN_ADD;
                  rf_r_addr0_sel = `RF_R_ADDR0_SEL_SR1;

                  rf_w_data_sel =  `RF_W_DATA_SEL_ALU;//ALU OUTPUTTED INFO
                  rf_w_addr_sel = `RF_W_ADDR_SEL_DR; // WIRTE BACK IN DR 
                  rf_w_enable = 1'b1;
                  nzp_ld = 1'b1;
                  nzp_sel = `NZP_SEL_ALU;
               end
              end
            
               `OC_AND: begin
                   if (ir[5] ==0 ) begin
                  
                  alu_input1_sel = `ALU_1_SEL_RF;
                  alu_input2_sel = `ALU_2_SEL_RF;
                  alu_sel          = `ALU_FN_AND;
                  rf_r_addr0_sel = `RF_R_ADDR0_SEL_SR1;
                   rf_r_addr1_sel = `RF_R_ADDR1_SEL_SR;

                  rf_w_data_sel =  `RF_W_DATA_SEL_ALU;//ALU OUTPUTTED INFO
                   rf_w_addr_sel = `RF_W_ADDR_SEL_DR; // WIRTE BACK IN DR 

                  rf_w_enable = 1'b1;
                  nzp_ld = 1'b1;
                  nzp_sel = `NZP_SEL_ALU;
               end
               else begin 
                  alu_input1_sel = `ALU_1_SEL_RF;
                  alu_input2_sel = `ALU_2_SEL_IMM5;
                  alu_sel          = `ALU_FN_AND;
                  rf_r_addr0_sel = `RF_R_ADDR0_SEL_SR1;
                  rf_w_addr_sel = `RF_W_ADDR_SEL_DR; // WIRTE BACK IN DR 

                  rf_w_data_sel =  `RF_W_DATA_SEL_ALU;//ALU OUTPUTTED INFO
                  rf_w_enable = 1'b1;
                  nzp_ld = 1'b1;
                  nzp_sel = `NZP_SEL_ALU;
               end
             end
             
             `OC_NOT: begin
             alu_input1_sel = `ALU_1_SEL_RF;
             alu_sel          = `ALU_FN_NOT;
             rf_r_addr0_sel = `RF_R_ADDR0_SEL_SR1;
             rf_w_data_sel =  `RF_W_DATA_SEL_ALU;//ALU OUTPUTTED INFO
             rf_w_addr_sel = `RF_W_ADDR_SEL_DR; // WIRTE BACK IN DR 
             rf_w_enable = 1'b1;
             nzp_ld = 1'b1;
             nzp_sel = `NZP_SEL_ALU;
               end  
               `OC_BR: begin
            if (nzp_input[`NZP_N] && ir[11]) begin
            pc_ld = 1'b1;
            pc_sel = `PC_SEL_OFF9;
            end else if (nzp_input[`NZP_Z] && ir[10]) begin
             pc_ld = 1'b1;
             pc_sel = `PC_SEL_OFF9;
            end else if (nzp_input[`NZP_P] && ir[9]) begin
             pc_ld = 1'b1;
             pc_sel = `PC_SEL_OFF9;
             end
               end
               `OC_JMP: begin
                  
                 rf_r_addr0_sel  =`RF_R_ADDR0_SEL_SR1;
                 pc_ld = 1'b1;
                 pc_sel = `PC_SEL_BASER;
               end
               `OC_JSR: begin
                  rf_w_data_sel =  `RF_W_DATA_SEL_PC;//TAKE PC AND MAKE R7 
                  rf_w_addr_sel = `RF_W_ADDR_SEL_R7;  //  PC + 1) is stored in R7.
                  rf_w_enable = 1'b1;
               end
               `OC_LD: begin
                 
                 alu_input1_sel = `ALU_1_SEL_PC;    // Select the PC (Program Counter) as the first input to the ALU.
                 alu_input2_sel = `ALU_2_SEL_OFF9;  // Select the 9-bit offset (sign-extended) as the second input to the ALU.
                 alu_sel = `ALU_FN_ADD;             // Perform addition in the ALU to compute the effective address (PC + SEXT(PCoffset9)).
    
                 d_r_addr_sel = `D_R_ADDR_ALU;  // Route the calculated address from the ALU to the memory address input.

                 rf_w_data_sel = `RF_W_DATA_SEL_MEM; // Select the data read from memory as the value to write to the destination register.
                 rf_w_addr_sel = `RF_W_ADDR_SEL_DR;  // Specify the destination register (DR) using bits [11:9] of the instruction.
                 rf_w_enable = 1'b1;                 // Enable writing to the destination register in the register file.
                 nzp_ld = 1'b1;                      // Load the condition codes (NZP) based on the value written to DR.
                  nzp_sel = `NZP_SEL_ALU;             // Update NZP flags based on the data written from memory.
               end    
               `OC_LDI: begin
                alu_input1_sel = `ALU_1_SEL_PC;      // Select the PC (Program Counter) as the first input to the ALU.
                alu_input2_sel = `ALU_2_SEL_OFF9;    // Select the 9-bit offset (sign-extended) as the second input to the ALU.
                alu_sel = `ALU_FN_ADD;               // Perform addition in the ALU to compute the effective address of the pointer (PC + SEXT(PCoffset9)).
    
                d_r_addr_sel = `D_R_ADDR_ALU;    // Route the calculated pointer address from the ALU to the memory address input for the first memory read.
                rf_r_addr0_sel = `RF_R_ADDR0_SEL_DR;  // Select the data at the pointer address from memory to be used in the second memory fetch.

                rf_w_data_sel = `RF_W_DATA_SEL_MEM;  // Select the final value read from memory as the value to write to the destination register (DR).
                rf_w_addr_sel = `RF_W_ADDR_SEL_DR;   // Specify the destination register (DR) using bits [11:9] of the instruction.
                rf_w_enable = 1'b1;                  // Enable writing to the destination register in the register file.
               end
               `OC_LDR: begin
               
               alu_input1_sel = `ALU_1_SEL_RF;           // Select the base register value as the first input to the ALU.
               alu_input2_sel = `ALU_2_SEL_OFF6;         // Select the 6-bit offset (sign-extended) as the second input to the ALU.
               alu_sel = `ALU_FN_ADD;               // Perform addition in the ALU to compute the effective address (BaseR + SEXT(offset6)).
    
               d_r_addr_sel = `D_R_ADDR_ALU;        // Route the calculated effective address from the ALU to the memory address input.
               rf_w_data_sel = `RF_W_DATA_SEL_MEM;  // Select the data fetched from memory as the value to write to the destination register.
               rf_w_addr_sel = `RF_W_ADDR_SEL_DR;   // Specify the Dr using bits [11:9] of the instruction.
               rf_w_enable = 1'b1;                  // Enable writing to the destination register in the register file.
               nzp_ld = 1'b1;                       // Load the condition codes (NZP) based on the value written to DR.
               nzp_sel = `NZP_SEL_ALU;              // Update NZP flags based on the data fetched from memory.
               end
               `OC_LEA: begin
               
             alu_input1_sel = `ALU_1_SEL_PC;           // Select the Program Counter as the first input to the ALU.
             alu_input2_sel = `ALU_2_SEL_OFF9;         // Select the 9-bit offset (sign-extended) as the second input to the ALU.
             alu_sel = `ALU_FN_ADD;               // Perform addition in the ALU to compute the effective address (PC + SEXT(PCoffset9)).

             rf_w_addr_sel = `RF_W_ADDR_SEL_DR;   // Specify the DR using bits [11:9] of the instruction.
             rf_w_enable = 1'b1;                  // Enable writing to the destination register in the register file.
               end
               `OC_ST: begin
              
             alu_input1_sel = `ALU_1_SEL_PC;           // Select the PC (Program Counter) as the first input to the ALU.
             alu_input2_sel = `ALU_2_SEL_OFF9;         // Select the 9-bit offset (sign-extended) as the second input to the ALU.
             alu_sel = `ALU_FN_ADD;               // Perform addition in the ALU to compute the effective memory address
             rf_r_addr0_sel = `RF_R_ADDR0_SEL_DR;  // Select the source register (`SR`) specified in bits [11:9].
              // SR is in the same bit locations as DR
             d_w_data_sel = `D_W_DATA_R0;
             d_w_addr_sel = `D_W_ADDR_ALU;        // Use the ALU's output (computed address) as the destination memory address.
             d_w_enable = 1'b1;                   // Enable memory writing to store the value from the source register.
               end
               `OC_STI: begin
             d_r_addr_sel = `D_R_ADDR_ALU;        // Use the ALU's output as the memory address for the pointer fetch.
             alu_input1_sel = `ALU_1_SEL_PC;           // Select the PC (Program Counter) as the first input to the ALU.
             alu_input2_sel = `ALU_2_SEL_OFF9;         // Select the 9-bit offset (sign-extended) as the second input to the ALU.
             alu_sel = `ALU_FN_ADD;               // Perform addition in the ALU to compute the effective memory address.
             end
            `OC_STR: begin
            alu_input1_sel = `ALU_1_SEL_RF1;         // Select the base register (BaseR) value as the first input to the ALU.
            alu_input2_sel = `ALU_2_SEL_OFF6;         // Select the 6-bit offset (sign-extended) as the second input to the ALU.
            alu_sel = `ALU_FN_ADD;               // Perform addition in the ALU to compute the effective memory address.
            d_w_data_sel = `D_W_DATA_R0;
            rf_r_addr0_sel = `RF_R_ADDR0_SEL_DR; // Specify the source register (SR) to fetch the value to be stored.
            rf_r_addr1_sel = `RF_R_ADDR1_SEL_SR;  // Route the SR to the memory data input.
    
             d_w_addr_sel = `D_W_ADDR_ALU;        // Route the ALU output as the memory write address.
             d_w_enable = 1'b1;                   // Enable memory write operation.
                end
      
             endcase
         end
         STATE_EXECUTE_I: begin
           case(ir[`OC]) // Check the opcode field in the instruction to determine the operation
        `OC_JSR: begin
            if (ir[11] == 0) begin
                // JSRR: Jump to subroutine using a base register
                pc_ld = 1'b1;                     // Load the PC with a new value
                pc_sel = `PC_SEL_BASER;           // Select the BaseR (Base Register) as the source for the new PC value
                rf_r_addr0_sel = `RF_R_ADDR0_SEL_SR1; // Use SR1 field to select the Base Register
            end
            else begin
                // JSR: Jump to subroutine using PC-relative offset
                pc_ld = 1'b1;                     // Load the PC with a new value
                pc_sel = `PC_SEL_OFF11;           // Select PC + SEXT(PCoffset11) as the new PC value
            end
        end

        `OC_LDI: begin
            // LDI: Load data indirectly from memory
            d_r_addr_sel = `D_R_ADDR_RF;          // Use the ALU's output (effective address) to fetch the pointer from memory
            rf_w_data_sel = `D_W_ADDR_MEM;        // Write the fetched memory data into the destination register
            rf_w_addr_sel = `RF_W_ADDR_SEL_DR;    // Use DR field to select the destination register
            rf_w_enable = 1'b1;                   // Enable writing to the destination register
            rf_r_addr0_sel = `RF_R_ADDR0_SEL_DR;  // Select DR as the address to fetch the effective address
            alu_sel = `ALU_FN_PASS;               // Pass-through ALU for address calculation
            alu_input1_sel = `ALU_1_SEL_RF;            // Select the base address (PC-relative or otherwise)
            nzp_ld = 1'b1;                        // Update the condition codes (NZP) based on the loaded data
            nzp_sel = `NZP_SEL_ALU;               // Set condition codes based on ALU result
        end

        `OC_LEA: begin
            // LEA: Load effective address into destination register
            rf_r_addr0_sel = `RF_R_ADDR0_SEL_DR;  // Use DR field to select the destination register
            alu_input1_sel = `ALU_1_SEL_RF;            // Select PC as the first input to the ALU
            alu_sel = `ALU_FN_PASS;               // Pass-through ALU to calculate effective address
            nzp_ld = 1'b1;                        // Update condition codes based on the loaded address
            nzp_sel = `NZP_SEL_ALU;               // Set condition codes based on ALU result
        end

        `OC_STI: begin
            // STI: Store data indirectly to memory
            d_w_addr_sel = `D_W_ADDR_MEM;         // Use the ALU's output (effective address) as the memory address
            d_w_enable = 1'b1;                    // Enable writing to memory
            rf_r_addr0_sel = `RF_R_ADDR0_SEL_DR;  // Use DR field to select the source register (SR)
        end
    endcase
end

        STATE_HALT: begin
    // Halt state to terminate program execution
 end
endcase
end



// Next State Combinational Logic
always @(*) begin
    next_state = state;
    
    case (state)
        STATE_FETCH: begin
            next_state = STATE_DECODE;
        end
        
        STATE_DECODE: begin
            next_state = STATE_EXECUTE;
        end
        
        STATE_EXECUTE: begin
         next_state = STATE_FETCH;

            case(ir[`OC]) // Check the opcode field
                `OC_JSR: begin
                    next_state = STATE_EXECUTE_I;
                end
                
                `OC_LDI: begin
                    next_state = STATE_EXECUTE_I;
                end
                
                `OC_LEA: begin
                    next_state = STATE_EXECUTE_I;
                end
                
                `OC_STI: begin
                    next_state = STATE_EXECUTE_I;
                end
                
                `OC_HLT: begin
                    next_state = STATE_HALT;
                end
            endcase
        end
        
        STATE_EXECUTE_I: begin
            next_state = STATE_FETCH;
        end
        
        
     
    endcase
end

// State Update Sequential Logic
always @(posedge clk) begin
    if (rst) begin
        state <= STATE_FETCH;
    end else begin
        state <= next_state;
    end
end
endmodule			
			
			
			

//===============================================================================
// Testbench Module for PUnC - LC3
//===============================================================================
`timescale 1ns/100ps
`define SIM;

// Start a test using the image file from the /images folder given in NAME
`define START_TEST(NAME)                                                    \
	begin                                                                   \
		$display("\nBeginning Test: %s", (NAME));                           \
		$display("----------------------------");                           \
		#1;                                                                 \
		$readmemh({"/home/vd4689/", (NAME), ".vmh"}, punc.dpath.mem.mem, 0, 127); \
		rst = 1;                                                            \
		@(posedge clk);                                                     \
		#1;                                                                 \
		rst = 0;                                                            \
		test_cnt = test_cnt + 1;                                            \
		@(posedge clk);                                                     \
	end #0

// Wait for the PC to freeze for 10 cycles
`define WAIT_PC_FREEZE    \
	@(posedge pc_frozen); \
	#1

// Print error message if MEM[ADDR] !== VAL
`define ASSERT_MEM_EQ(ADDR, VAL)                                          \
	begin                                                                 \
		#1;                                                               \
		mem_debug_addr = (ADDR);                                          \
		#1;                                                               \
		if (mem_debug_data !== (VAL)) begin                               \
			$display("\t[FAILURE]: Expected MEM[%d] == %d, but found %d", \
			         (ADDR), (VAL), mem_debug_data);                      \
			err_cnt = err_cnt + 1;                                        \
		end                                                               \
	end #0

// Print error message if REG[ADDR] !== VAL
`define ASSERT_REG_EQ(ADDR, VAL)                                          \
	begin                                                                 \
		#1;                                                               \
		rf_debug_addr = (ADDR);                                           \
		#1;                                                               \
		if (rf_debug_data !== (VAL)) begin                                \
			$display("\t[FAILURE]: Expected REG[%d] == %d, but found %d", \
			         (ADDR), (VAL), rf_debug_data);                       \
			err_cnt = err_cnt + 1;                                        \
		end                                                               \
	end #0

// Print error message if PC !== VAL
`define ASSERT_PC_EQ(VAL)                                                 \
	begin                                                                 \
		if (pc_debug_data !== (VAL)) begin                                \
			$display("\t[FAILURE]: Expected PC == %d, but found %d",      \
			         (VAL), pc_debug_data);                               \
			err_cnt = err_cnt + 1;                                        \
		end                                                               \
	end #0

module PUnCTATest;

	localparam CLK_PERIOD = 10;

	// Testing Variables
	reg  [15:0] pc_cnt = 0;
	reg  [15:0] prev_pc = 0;
	reg  [5:0]  test_cnt = 0;
	reg  [5:0]  err_cnt = 0;
	wire        pc_frozen = (pc_cnt > 16'd10);


	// PUnC Interface
	reg         clk = 0;
	reg         rst = 0;
	reg  [15:0] mem_debug_addr = 0;
	reg  [2:0]  rf_debug_addr  = 0;
	wire [15:0] mem_debug_data;
	wire [15:0] rf_debug_data;
	wire [15:0] pc_debug_data;

	// Clock
	always begin
		#5 clk = ~clk;
	end

	// Keep track of how long PC has stayed at the same value
	// (For telling when PC is frozen)
	always @(posedge clk) begin
		if (prev_pc == pc_debug_data) begin
			pc_cnt <= pc_cnt + 1;
		end
		else begin
			pc_cnt <= 0;
		end
		prev_pc <= pc_debug_data;
	end


	// PUnC Main Module
	PUnC punc(
		.clk              (clk),
		.rst              (rst),

		.mem_debug_addr   (mem_debug_addr),
		.rf_debug_addr    (rf_debug_addr),
		.mem_debug_data   (mem_debug_data),
		.rf_debug_data    (rf_debug_data),
		.pc_debug_data    (pc_debug_data)
	);

	initial begin
		$dumpfile("PUnC.vcd");
		$dumpvars(0, PUnCTATest);

		$display("\n\n\n===========================");
		$display("=== Beginning All Tests ===");
		$display("===========================");

		`START_TEST("addi");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(0, 16'd3);
		`ASSERT_REG_EQ(1, 16'd5);
		`ASSERT_REG_EQ(2, 16'd4);

		`START_TEST("addr");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(1, 16'd5);
		`ASSERT_REG_EQ(2, 16'd8);
		`ASSERT_REG_EQ(3, 16'd13);

		`START_TEST("andi");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(1, 16'd2);
		`ASSERT_REG_EQ(3, 16'd0);

		`START_TEST("andr");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(2, 16'd2);

		`START_TEST("not");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(2, 16'd0);
		`ASSERT_REG_EQ(3, 16'hFFF0);

		`START_TEST("ld");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(0, 16'd1);
		`ASSERT_REG_EQ(1, 16'd2);
		`ASSERT_REG_EQ(2, 16'd4);
		`ASSERT_REG_EQ(3, 16'h2402);

		`START_TEST("ldi");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(0, 16'h00FF);
		`ASSERT_REG_EQ(1, 16'hFFFF);

		`START_TEST("ldr");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(2, 16'd2);
		`ASSERT_REG_EQ(3, 16'd3);

		`START_TEST("lea");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(0, 16'd4);
		`ASSERT_REG_EQ(1, 16'd6);
		`ASSERT_REG_EQ(2, 16'd1);

		`START_TEST("st");
		`WAIT_PC_FREEZE;
		`ASSERT_MEM_EQ(16'd0, 16'd15);
		`ASSERT_MEM_EQ(16'd1, 16'd10);

		`START_TEST("sti");
		`WAIT_PC_FREEZE;
		`ASSERT_MEM_EQ(16'd0, 16'd15);

		`START_TEST("str");
		`WAIT_PC_FREEZE;
		`ASSERT_MEM_EQ(16'd4, 16'd15);

		`START_TEST("jmp");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(1, 16'd1);

		`START_TEST("jsr");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(0, 16'd1);
		`ASSERT_REG_EQ(7, 16'd1);

		`START_TEST("jsrr");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(1, 16'd3);

		`START_TEST("ret");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(1, 16'd1);

		`START_TEST("br");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(1, 16'd5);

		`START_TEST("gcd");
		`WAIT_PC_FREEZE;
		`ASSERT_REG_EQ(0, 16'd3);
		`ASSERT_REG_EQ(1, 16'd3);
		`ASSERT_MEM_EQ(23, 16'd3);

		// ADD YOUR TEST HERE!
		`START_TEST("assemblycode");
		`WAIT_PC_FREEZE;
		`define WAIT_PC_FREEZE    \
	     @(posedge pc_frozen); \
	       #10  // Increase delay to allow stabilization


		$display("\n----------------------------");
		$display("--- Completed %d Tests  ----", test_cnt);
		$display("--- Found     %d Errors ----", err_cnt);
		$display("----------------------------");
		$display("\n============================");
		$display("===== End of All Tests =====");
		$display("============================");
		$finish;
	end

endmodule
